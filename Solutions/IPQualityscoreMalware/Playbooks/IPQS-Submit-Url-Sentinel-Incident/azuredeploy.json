{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
    "title": "IPQS-Submit-URL-Sentinel-Incident",
    "description": "Submits a url or set of urls associated with an incident to IPQS for Analyis.",
    "prerequisites": "IPQualityscore API Key.",
    "postDeployment": ["None"],
    "lastUpdateTime": "2023-04-04T00:00:00.000Z",
    "entities": ["url"],
    "tags": ["Enrichment"],
    "support": {
      "tier": "community"
    },
    "author": {
        "name": "David Mackler, IPQualityScore"
    },
    "releaseNotes": [
        {
            "version": "1.0.0",
            "title": "IPQS-Submit-URL-Sentinel-Incident",
            "notes": [ "Initial version" ]
        }
    ]
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "IPQS-Submit-URL-Sentinel-Incident",
            "type": "String",
            "metadata": {
                "description": "Name of the Logic App/Playbook"
            }
        },
        "WorkspaceID": {
              "defaultValue": "",
              "type": "string",
              "metadata": {
                "description": "Log Analytics Workspace ID"
              }
        },
        "FunctionAppName": {
              "defaultValue": "ipqsenrich",
              "type": "string",
              "metadata": {
                "description": "Name of the FunctionApp"
              }
        }
    },
    "variables": {
        "FunctionAppName": "[concat(toLower(parameters('FunctionAppName')), take(uniqueString(resourceGroup().id), 3))]",
        "AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
          "type": "Microsoft.Web/connections",
          "apiVersion": "2016-06-01",
          "name": "[variables('AzureSentinelConnectionName')]",
          "location": "[resourceGroup().location]",
          "kind": "V1",
          "properties": {
            "displayName": "[variables('AzureSentinelConnectionName')]",
            "customParameterValues": {},
            "parameterValueType": "Alternative",
            "api": {
              "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
            }
          }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2019-05-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "identity": {
               "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "Notify Via Email": {
                            "defaultValue": true,
                            "type": "Bool"
                        },
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "body": {
                                    "callback_url": "@listCallbackUrl()"
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Scan_Status": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "scan_status",
                                        "type": "boolean",
                                        "value": false
                                    }
                                ]
                            }
                        },
                        "Email_Body": {
                            "runAfter": {
                                "Scan_Report": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "email_body",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "For_Every_URL": {
                            "foreach": "@body('Entities_-_Get_URLs')?['URLs']",
                            "actions": {
                                "Check_for_Result": {
                                    "actions": {
                                        "Append_to_Raw_Response_array_variable": {
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "raw_results",
                                                "value": "@addProperty(body('IPQSLookupUrl'),'url_name',items('For_Every_URL')['url'])"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "IPQSLookupUrl": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "If_Success": {
                                                "actions": {
                                                    "Set_Scan_Status_varibale_to_False": {
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "scan_status",
                                                            "value": false
                                                        }
                                                    },
                                                    "Wait_untill_scan_is_completed": {
                                                        "actions": {
                                                            "Check_If_Scan_is_finished": {
                                                                "actions": {
                                                                    "Set_Scan_Status_to_True": {
                                                                        "type": "SetVariable",
                                                                        "inputs": {
                                                                            "name": "scan_status",
                                                                            "value": true
                                                                        }
                                                                    },
                                                                    "Append_to_Raw_Response_array_variable1": {
                                                                        "runAfter": {
                                                                            "Set_Scan_Status_to_True": [
                                                                                "Succeeded"
                                                                            ]
                                                                        },
                                                                        "type": "AppendToArrayVariable",
                                                                        "inputs": {
                                                                            "name": "raw_results",
                                                                            "value": "@addProperty(body('IPQSLookupRequestId'),'url_name',items('For_Every_URL')['url'])"
                                                                        }
                                                                    }
                                                                },
                                                                "runAfter": {
                                                                    "IPQSLookupRequestId": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "else": {
                                                                    "actions": {
                                                                        "Delay_by_2_minutes": {
                                                                            "type": "Wait",
                                                                            "inputs": {
                                                                                "interval": {
                                                                                    "count": 2,
                                                                                    "unit": "Minute"
                                                                                }
                                                                            }
                                                                        },
                                                                        "Set_submission_status_to_false_again": {
                                                                            "runAfter": {
                                                                                "Delay_by_2_minutes": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "SetVariable",
                                                                            "inputs": {
                                                                                "name": "scan_status",
                                                                                "value": false
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "expression": {
                                                                    "and": [
                                                                        {
                                                                            "equals": [
                                                                                "@body('IPQSLookupRequestId')?['success']",
                                                                                true
                                                                            ]
                                                                        },
                                                                        {
                                                                            "or": [
                                                                                {
                                                                                    "equals": [
                                                                                        "@body('IPQSLookupRequestId')?['status']",
                                                                                        "done"
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "equals": [
                                                                                        "@body('IPQSLookupRequestId')?['status']",
                                                                                        "cached"
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                "type": "If"
                                                            },
                                                            "IPQSLookupRequestId": {
                                                                "type": "Function",
                                                                "inputs": {
                                                                    "body": {
                                                                        "request_id": "@body('IPQSSubmitUrl')?['request_id']"
                                                                    },
                                                                    "function": {
                                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('FunctionAppName'), '/functions/IPQSLookupRequestId')]"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Set_Scan_Status_varibale_to_False": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "expression": "@equals(variables('scan_status'), true)",
                                                        "limit": {
                                                            "count": 60,
                                                            "timeout": "PT1H"
                                                        },
                                                        "type": "Until"
                                                    }
                                                },
                                                "runAfter": {
                                                    "IPQSSubmitUrl": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "else": {
                                                    "actions": {}
                                                },
                                                "expression": {
                                                    "and": [
                                                        {
                                                            "equals": [
                                                                "@body('IPQSSubmitUrl')?['success']",
                                                                true
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "type": "If"
                                            },
                                            "IPQSSubmitUrl": {
                                                "type": "Function",
                                                "inputs": {
                                                    "body": {
                                                        "url": "@items('For_Every_URL')?['url']"
                                                    },
                                                    "function": {
                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('FunctionAppName'), '/functions/IPQSSubmitUrl')]"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@body('IPQSLookupUrl')?['success']",
                                                    true
                                                ]
                                            },
                                            {
                                                "greater": [
                                                    "@length(body('IPQSLookupUrl')?['result'])",
                                                    1
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "IPQSLookupUrl": {
                                    "type": "Function",
                                    "inputs": {
                                        "body": {
                                            "url": "@items('For_Every_URL')?['url']"
                                        },
                                        "function": {
                                            "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('FunctionAppName'), '/functions/IPQSLookupUrl')]"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Entities_-_Get_URLs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "Entities_-_Get_URLs": {
                            "runAfter": {
                                "Indicator_Object": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "path": "/entities/url"
                            }
                        },
                        "Detected": {
                            "runAfter": {
                                "Scan_Status": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "detected",
                                        "type": "boolean"
                                    }
                                ]
                            }
                        },
                        "For_each_Raw_Result": {
                            "foreach": "@variables('raw_results')",
                            "actions": {
                                "Set_Detected": {
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "detected",
                                        "value": "@items('For_each_Raw_Result')?['detected']"
                                    }
                                },
                                "Set_scan_report": {
                                    "runAfter": {
                                        "Set_Detected": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "scan_report",
                                        "value": [
                                            {
                                                "File Name": "@items('For_each_Raw_Result')?['file_name']",
                                                "File Hash": "@items('For_each_Raw_Result')?['file_hash']",
                                                "SHA1": "@items('For_each_Raw_Result')?['sha1']",
                                                "MD5": "@items('For_each_Raw_Result')?['md5']",
                                                "File Size": "@items('For_each_Raw_Result')?['file_size']",
                                                "Detected": "@items('For_each_Raw_Result')?['detected']",
                                                "Result": "@replace(replace(string(items('For_each_Raw_Result')?['result']), '[', ''), ']', '')",
                                                "File Type": "@items('For_each_Raw_Result')?['file_type']"
                                            }
                                        ]
                                    }
                                },
                                "Create_HTML_table": {
                                    "runAfter": {
                                        "Set_scan_report": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Table",
                                    "inputs": {
                                        "from": "@variables('scan_report')",
                                        "format": "HTML"
                                    }
                                },
                                "Add_comment_to_incident_(V3)": {
                                    "runAfter": {
                                        "Create_HTML_table": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p class=\"editor-paragraph\">IPQS Submission Details for URL: @{replace(replace(items('For_each_Raw_Result')?['url_name'], 'https://', ''), 'http://', '')\r\n}</p><p class=\"editor-paragraph\">@{body('Create_HTML_table')}</p>"
                                        },
                                        "path": "/Incidents/Comment"
                                    }
                                }
                            },
                            "runAfter": {
                                "For_Every_URL": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "Scan_Report": {
                            "runAfter": {
                                "Raw_Response": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "scan_report",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Indicator_Object": {
                            "runAfter": {
                                "Email_Body": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "indicator_object",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Raw_Response": {
                            "runAfter": {
                                "Detected": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_results",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                  "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                  "connectionName": "[variables('AzureSentinelConnectionName')]",
                  "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]",
                  "connectionProperties": {
                    "authentication": {
                      "type": "ManagedServiceIdentity"
                    }
                  }
                }
                        }
                    }
                }
            }
        }
    ]
}
